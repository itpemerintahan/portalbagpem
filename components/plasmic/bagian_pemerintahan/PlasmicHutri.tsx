// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fkGsUvxJf1NU8wK8ox6gax
// Component: V6b_e_KsIn

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  usePlasmicDataConfig,
  executePlasmicDataOp,
  usePlasmicDataOp
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import PageLayout from "../../PageLayout"; // plasmic-import: soRtl0ZLW8i/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: XpPUi5haS1M/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_bagian_pemerintahan.module.css"; // plasmic-import: fkGsUvxJf1NU8wK8ox6gax/projectcss
import sty from "./PlasmicHutri.module.css"; // plasmic-import: V6b_e_KsIn/css

createPlasmicElementProxy;

export type PlasmicHutri__VariantMembers = {};
export type PlasmicHutri__VariantsArgs = {};
type VariantPropType = keyof PlasmicHutri__VariantsArgs;
export const PlasmicHutri__VariantProps = new Array<VariantPropType>();

export type PlasmicHutri__ArgsType = {};
type ArgPropType = keyof PlasmicHutri__ArgsType;
export const PlasmicHutri__ArgProps = new Array<ArgPropType>();

export type PlasmicHutri__OverridesType = {
  root?: p.Flex<"div">;
  pageLayout?: p.Flex<typeof PageLayout>;
  article?: p.Flex<"article">;
  h1?: p.Flex<"h1">;
};

export interface DefaultHutriProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHutri__RenderFunc(props: {
  variants: PlasmicHutri__VariantsArgs;
  args: PlasmicHutri__ArgsType;
  overrides: PlasmicHutri__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = ph.useGlobalActions?.();

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const new$Queries = {
    queryContenFulFilesSetneghutri: usePlasmicDataOp(
      (() => {
        try {
          return {
            sourceId: "314Q4SAgWJnAUSDz1BQz9E",
            opId: "054fd310-bb36-45d0-8e69-a06fef760bbd",
            userArgs: {},
            cacheKey: "plasmic.$.0lfu9SZmx.$.",
            invalidatedKeys: null,
            roleId: null
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          } else {
            throw e;
          }
        }
      })()
    ),

    queryContenFulFilesProkompimhutri: usePlasmicDataOp(
      (() => {
        try {
          return {
            sourceId: "314Q4SAgWJnAUSDz1BQz9E",
            opId: "63b63798-205f-4d45-81f6-d467faced672",
            userArgs: {},
            cacheKey: "plasmic.$.lBgauqVMN.$.",
            invalidatedKeys: null,
            roleId: null
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          } else {
            throw e;
          }
        }
      })()
    )
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
  }

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicHutri.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHutri.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHutri.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicHutri.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicHutri.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicHutri.pageMetadata.description}
        />
        <meta
          key="og:image"
          property="og:image"
          content={PlasmicHutri.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicHutri.pageMetadata.ogImageSrc}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
          >
            <ph.DataCtxReader>
              {$ctx => (
                <React.Fragment>
                  <section
                    className={classNames(projectcss.all, sty.section__rNvwL)}
                  >
                    <section
                      className={classNames(projectcss.all, sty.section__ljx6S)}
                    />

                    <div
                      className={classNames(projectcss.all, sty.columns__dqK3G)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column___27Nhy
                        )}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__vTOe2
                        )}
                      >
                        <article
                          data-plasmic-name={"article"}
                          data-plasmic-override={overrides.article}
                          className={classNames(projectcss.all, sty.article)}
                        >
                          <h1
                            data-plasmic-name={"h1"}
                            data-plasmic-override={overrides.h1}
                            className={classNames(
                              projectcss.all,
                              projectcss.h1,
                              projectcss.__wab_text,
                              sty.h1
                            )}
                          >
                            {"Peringatan HUT RI"}
                          </h1>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__gVkzc
                            )}
                          >
                            {
                              "Portal Informasi Peringatan HUT RI ke 78 Kabupaten Batang\n"
                            }
                          </div>
                        </article>
                      </div>
                    </div>
                  </section>
                  <section
                    className={classNames(projectcss.all, sty.section__gSmst)}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2___817Ld
                      )}
                    >
                      {"File dari SETNEG"}
                    </h2>
                    {(
                      (() => {
                        try {
                          return $queries.queryContenFulFilesSetneghutri.data
                            .response.items;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })() ?? []
                    ).map((currentItem, currentIndex) => (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__yzQcb
                        )}
                        key={currentIndex}
                        onClick={async event => {
                          const $steps = {};
                          $steps["goToPage"] = true
                            ? (() => {
                                const actionArgs = {
                                  destination: __wrapUserFunction(
                                    {
                                      type: "InteractionArgLoc",
                                      actionName: "navigation",
                                      interactionUuid: "wYSVe1yB1",
                                      componentUuid: "V6b_e_KsIn",
                                      argName: "destination"
                                    },
                                    () =>
                                      (() => {
                                        try {
                                          return currentItem.fields.link1;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                  )
                                };
                                return __wrapUserFunction(
                                  {
                                    type: "InteractionLoc",
                                    actionName: "navigation",
                                    interactionUuid: "wYSVe1yB1",
                                    componentUuid: "V6b_e_KsIn"
                                  },
                                  () =>
                                    (({ destination }) => {
                                      __nextRouter?.push(destination);
                                    })?.apply(null, [actionArgs]),
                                  actionArgs
                                );
                              })()
                            : undefined;
                          if (
                            typeof $steps["goToPage"] === "object" &&
                            typeof $steps["goToPage"].then === "function"
                          ) {
                            $steps["goToPage"] = await __wrapUserPromise(
                              {
                                type: "InteractionLoc",
                                actionName: "navigation",
                                interactionUuid: "wYSVe1yB1",
                                componentUuid: "V6b_e_KsIn"
                              },
                              $steps["goToPage"]
                            );
                          }
                        }}
                      >
                        <h3
                          className={classNames(
                            projectcss.all,
                            projectcss.h3,
                            projectcss.__wab_text,
                            sty.h3__lVNrq
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.fields.nama;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Nama File";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </h3>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.columns__o98Vn
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__gak84
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__h5WLc
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      "Penerbit: " +
                                      currentItem.fields.penerbitFile
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "penerbit file";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__nrfs
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__kCzmF
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      "Tema: " + currentItem.fields.tentang
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Tema";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </section>
                  <section
                    className={classNames(projectcss.all, sty.section___2DKTd)}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__vfHwO
                      )}
                    >
                      {"File dari Bag. PROKOMPIM SETDA Kab. Batang"}
                    </h2>
                    {(
                      (() => {
                        try {
                          return $queries.queryContenFulFilesProkompimhutri.data
                            .response.items;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })() ?? []
                    ).map((currentItem, currentIndex) => (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__kYnDd
                        )}
                        key={currentIndex}
                        onClick={async event => {
                          const $steps = {};
                          $steps["showNotification"] = true
                            ? (() => {
                                const actionArgs = {
                                  type: __wrapUserFunction(
                                    {
                                      type: "InteractionArgLoc",
                                      actionName:
                                        "plasmic-antd5-config-provider.showNotification",
                                      interactionUuid: "dXCpvBU51",
                                      componentUuid: "V6b_e_KsIn",
                                      argName: "type"
                                    },
                                    () => "info"
                                  ),
                                  message: __wrapUserFunction(
                                    {
                                      type: "InteractionArgLoc",
                                      actionName:
                                        "plasmic-antd5-config-provider.showNotification",
                                      interactionUuid: "dXCpvBU51",
                                      componentUuid: "V6b_e_KsIn",
                                      argName: "message"
                                    },
                                    () => "Membuka File"
                                  ),
                                  description: __wrapUserFunction(
                                    {
                                      type: "InteractionArgLoc",
                                      actionName:
                                        "plasmic-antd5-config-provider.showNotification",
                                      interactionUuid: "dXCpvBU51",
                                      componentUuid: "V6b_e_KsIn",
                                      argName: "description"
                                    },
                                    () =>
                                      "Klik OK atau Allow bila muncul peringatan"
                                  )
                                };
                                return __wrapUserFunction(
                                  {
                                    type: "InteractionLoc",
                                    actionName:
                                      "plasmic-antd5-config-provider.showNotification",
                                    interactionUuid: "dXCpvBU51",
                                    componentUuid: "V6b_e_KsIn"
                                  },
                                  () =>
                                    $globalActions[
                                      "plasmic-antd5-config-provider.showNotification"
                                    ]?.apply(null, [actionArgs]),
                                  actionArgs
                                );
                              })()
                            : undefined;
                          if (
                            typeof $steps["showNotification"] === "object" &&
                            typeof $steps["showNotification"].then ===
                              "function"
                          ) {
                            $steps["showNotification"] =
                              await __wrapUserPromise(
                                {
                                  type: "InteractionLoc",
                                  actionName:
                                    "plasmic-antd5-config-provider.showNotification",
                                  interactionUuid: "dXCpvBU51",
                                  componentUuid: "V6b_e_KsIn"
                                },
                                $steps["showNotification"]
                              );
                          }
                          $steps["goToPage"] = true
                            ? (() => {
                                const actionArgs = {
                                  destination: __wrapUserFunction(
                                    {
                                      type: "InteractionArgLoc",
                                      actionName: "navigation",
                                      interactionUuid: "g1rQJ5AoNQH",
                                      componentUuid: "V6b_e_KsIn",
                                      argName: "destination"
                                    },
                                    () =>
                                      (() => {
                                        try {
                                          return currentItem.fields.link1;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                  )
                                };
                                return __wrapUserFunction(
                                  {
                                    type: "InteractionLoc",
                                    actionName: "navigation",
                                    interactionUuid: "g1rQJ5AoNQH",
                                    componentUuid: "V6b_e_KsIn"
                                  },
                                  () =>
                                    (({ destination }) => {
                                      __nextRouter?.push(destination);
                                    })?.apply(null, [actionArgs]),
                                  actionArgs
                                );
                              })()
                            : undefined;
                          if (
                            typeof $steps["goToPage"] === "object" &&
                            typeof $steps["goToPage"].then === "function"
                          ) {
                            $steps["goToPage"] = await __wrapUserPromise(
                              {
                                type: "InteractionLoc",
                                actionName: "navigation",
                                interactionUuid: "g1rQJ5AoNQH",
                                componentUuid: "V6b_e_KsIn"
                              },
                              $steps["goToPage"]
                            );
                          }
                        }}
                      >
                        <h3
                          className={classNames(
                            projectcss.all,
                            projectcss.h3,
                            projectcss.__wab_text,
                            sty.h3__tahT
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.fields.nama;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Nama File";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </h3>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.columns___0UVg
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__q3Uqb
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__bBzgb
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      "Penerbit: " +
                                      currentItem.fields.penerbitFile
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "penerbit file";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__kupOo
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__mkaQl
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      "Tema: " + currentItem.fields.tentang
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Tema";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </section>
                </React.Fragment>
              )}
            </ph.DataCtxReader>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "pageLayout", "article", "h1"],
  pageLayout: ["pageLayout", "article", "h1"],
  article: ["article", "h1"],
  h1: ["h1"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageLayout: typeof PageLayout;
  article: "article";
  h1: "h1";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHutri__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHutri__VariantsArgs;
    args?: PlasmicHutri__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHutri__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHutri__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHutri__ArgProps,
          internalVariantPropNames: PlasmicHutri__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHutri__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHutri";
  } else {
    func.displayName = `PlasmicHutri.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <p.PlasmicPageGuard
      minRole={null}
      appId={"fkGsUvxJf1NU8wK8ox6gax"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </p.PlasmicPageGuard>
  );

  return PageGuard;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "fkGsUvxJf1NU8wK8ox6gax"
    });

    return (
      <p.PlasmicDataSourceContextProvider
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </p.PlasmicDataSourceContextProvider>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicHutri = Object.assign(
  // Top-level PlasmicHutri renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    article: makeNodeComponent("article"),
    h1: makeNodeComponent("h1"),

    // Metadata about props expected for PlasmicHutri
    internalVariantProps: PlasmicHutri__VariantProps,
    internalArgProps: PlasmicHutri__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Portal Peringatan HUT RI",
      description: "Portal Informasi Peringatan HUT RI ke 78 Kabupaten Batang",
      ogImageSrc:
        "https://site-assets.plasmic.app/933021002febf0d57d89c41cbbbb084b.jpg",
      canonical: ""
    }
  }
);

export default PlasmicHutri;
/* prettier-ignore-end */
